#include "VKRenderer.h"


VkFormatProperties CVKHelper::vkFormatProperties[VK_FORMAT_RANGE_SIZE];
VkComponentMapping CVKHelper::vkFormatComponentMapping[VK_FORMAT_RANGE_SIZE];

void CVKHelper::SetupFormat(VkPhysicalDevice vkPhysicalDevice)
{
	for (int indexFormat = 0; indexFormat < VK_FORMAT_RANGE_SIZE; indexFormat++) {
		vkGetPhysicalDeviceFormatProperties(vkPhysicalDevice, (VkFormat)indexFormat, &vkFormatProperties[indexFormat]);
		vkFormatComponentMapping[indexFormat].r = VK_COMPONENT_SWIZZLE_R;
		vkFormatComponentMapping[indexFormat].g = VK_COMPONENT_SWIZZLE_G;
		vkFormatComponentMapping[indexFormat].b = VK_COMPONENT_SWIZZLE_B;
		vkFormatComponentMapping[indexFormat].a = VK_COMPONENT_SWIZZLE_A;
	}

	vkFormatComponentMapping[VK_FORMAT_B8G8R8A8_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_R8_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R16_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_B10G11R11_UFLOAT_PACK32] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R16G16B16A16_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_D24_UNORM_S8_UINT] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
	vkFormatComponentMapping[VK_FORMAT_D32_SFLOAT_S8_UINT] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
	vkFormatComponentMapping[VK_FORMAT_D16_UNORM_S8_UINT] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
	vkFormatComponentMapping[VK_FORMAT_D16_UNORM] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
	vkFormatComponentMapping[VK_FORMAT_R32G32_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R32G32B32A32_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_R16G16_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R16G16_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R16_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R16_SINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R32_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R32_SINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R8_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_X8_D24_UNORM_PACK32] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_D32_SFLOAT] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
	vkFormatComponentMapping[VK_FORMAT_R16_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_A2B10G10R10_UNORM_PACK32] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_R16G16B16A16_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_R5G6B5_UNORM_PACK16] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R8G8B8A8_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_R16G16_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R16G16B16A16_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_R16G16B16A16_SINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_R32G32B32_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R8G8_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_R32_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_BC1_RGB_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_BC2_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_BC3_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_BC4_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_BC5_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_BC6H_UFLOAT_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_BC7_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_ASTC_4x4_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_ASTC_6x6_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_ASTC_8x8_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_ASTC_10x10_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_ASTC_12x12_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	vkFormatComponentMapping[VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
	vkFormatComponentMapping[VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
}

const VkComponentMapping& CVKHelper::GetFormatComponentMapping(VkFormat format)
{
	return vkFormatComponentMapping[format];
}

bool CVKHelper::IsFormatSupported(VkFormat format)
{
	return true;
	return vkFormatProperties[format].bufferFeatures || vkFormatProperties[format].linearTilingFeatures || vkFormatProperties[format].optimalTilingFeatures;
}

VkAccessFlags CVKHelper::GetAccessMaskByImageLayout(VkImageLayout layout)
{
	switch ((int)layout) {
	case VK_IMAGE_LAYOUT_UNDEFINED:
		return 0;

	case VK_IMAGE_LAYOUT_PREINITIALIZED:
		return VK_ACCESS_HOST_WRITE_BIT;

	case VK_IMAGE_LAYOUT_GENERAL:
		return VK_ACCESS_SHADER_READ_BIT | VK_ACCESS_SHADER_WRITE_BIT;

	case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
		return VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;

	case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
		return VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;

	case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:
		return VK_ACCESS_SHADER_READ_BIT;

	case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
		return VK_ACCESS_SHADER_READ_BIT;

	case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
		return VK_ACCESS_TRANSFER_READ_BIT;

	case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
		return VK_ACCESS_TRANSFER_WRITE_BIT;

	case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR:
		return 0;

	default:
		return 0;
	}
}

VkAccessFlags CVKHelper::GetAccessMaskByBufferUsage(VkBufferUsageFlags usage)
{
	VkAccessFlags flags = 0;

	if (usage & VK_BUFFER_USAGE_INDEX_BUFFER_BIT) {
		flags |= VK_ACCESS_INDEX_READ_BIT;
	}

	if (usage & VK_BUFFER_USAGE_VERTEX_BUFFER_BIT) {
		flags |= VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT;
	}

	if (usage & VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT) {
		flags |= VK_ACCESS_UNIFORM_READ_BIT;
	}

	return flags;
}

VkPipelineStageFlags CVKHelper::GetPipelineStageFlagsByImageLayout(VkImageLayout layout)
{
	switch ((int)layout) {
	case VK_IMAGE_LAYOUT_UNDEFINED:
		return VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;

	case VK_IMAGE_LAYOUT_PREINITIALIZED:
		return VK_PIPELINE_STAGE_HOST_BIT;

	case VK_IMAGE_LAYOUT_GENERAL:
		return VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;

	case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
		return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;

	case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
		return VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;

	case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:
		return VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;

	case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
		return VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;

	case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
		return VK_PIPELINE_STAGE_TRANSFER_BIT;

	case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
		return VK_PIPELINE_STAGE_TRANSFER_BIT;

	case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR:
		return VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;

	default:
		return 0;
	}
}

VkPipelineStageFlags CVKHelper::GetPipelineStageFlagsByAccessFlags(VkAccessFlags access)
{
	switch ((int)access) {
	case VK_ACCESS_INDIRECT_COMMAND_READ_BIT:
		return VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT;

	case VK_ACCESS_INDEX_READ_BIT:
		return VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;

	case VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT:
		return VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;

	case VK_ACCESS_UNIFORM_READ_BIT:
		return VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;

	case VK_ACCESS_INPUT_ATTACHMENT_READ_BIT:
		return VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;

	case VK_ACCESS_SHADER_READ_BIT:
		return VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;

	case VK_ACCESS_SHADER_WRITE_BIT:
		return VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;

	case VK_ACCESS_COLOR_ATTACHMENT_READ_BIT:
		return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;

	case VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT:
		return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;

	case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT:
		return VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;

	case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT:
		return VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;

	case VK_ACCESS_TRANSFER_READ_BIT:
		return VK_PIPELINE_STAGE_TRANSFER_BIT;

	case VK_ACCESS_TRANSFER_WRITE_BIT:
		return VK_PIPELINE_STAGE_TRANSFER_BIT;

	case VK_ACCESS_HOST_READ_BIT:
		return VK_PIPELINE_STAGE_HOST_BIT;

	case VK_ACCESS_HOST_WRITE_BIT:
		return VK_PIPELINE_STAGE_HOST_BIT;

	default:
		return VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM;
	}
}

VkPipelineStageFlags CVKHelper::GetPipelineStageFlagsByBufferUsage(VkBufferUsageFlags usage)
{
	VkPipelineStageFlags flags = 0;

	if (usage & VK_BUFFER_USAGE_INDEX_BUFFER_BIT) {
		flags |= VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;
	}

	if (usage & VK_BUFFER_USAGE_VERTEX_BUFFER_BIT) {
		flags |= VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;
	}

	if (usage & VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT) {
		flags |= VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
	}

	return flags;
}

VkSampleCountFlagBits CVKHelper::TranslateSampleCount(int samples)
{
	switch (samples) {
	case 1:
		return VK_SAMPLE_COUNT_1_BIT;

	case 2:
		return VK_SAMPLE_COUNT_2_BIT;

	case 4:
		return VK_SAMPLE_COUNT_4_BIT;

	case 8:
		return VK_SAMPLE_COUNT_8_BIT;

	case 16:
		return VK_SAMPLE_COUNT_16_BIT;

	case 32:
		return VK_SAMPLE_COUNT_32_BIT;

	case 64:
		return VK_SAMPLE_COUNT_64_BIT;

	default:
		return VK_SAMPLE_COUNT_1_BIT;
	}
}

VkPrimitiveTopology CVKHelper::TranslatePrimitiveTopology(GfxPrimitiveTopology topology)
{
	switch ((int)topology) {
	case GFX_PRIMITIVE_TOPOLOGY_POINT_LIST:
		return VK_PRIMITIVE_TOPOLOGY_POINT_LIST;

	case GFX_PRIMITIVE_TOPOLOGY_LINE_LIST:
		return VK_PRIMITIVE_TOPOLOGY_LINE_LIST;

	case GFX_PRIMITIVE_TOPOLOGY_LINE_STRIP:
		return VK_PRIMITIVE_TOPOLOGY_LINE_STRIP;

	case GFX_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST:
		return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;

	case GFX_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP:
		return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP;

	case GFX_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN:
		return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN;

	default:
		return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
	}
}

VkPolygonMode CVKHelper::TranslatePolytonMode(GfxPolygonMode polygonMode)
{
	switch ((int)polygonMode) {
	case GFX_POLYGON_MODE_FILL:
		return VK_POLYGON_MODE_FILL;

	case GFX_POLYGON_MODE_LINE:
		return VK_POLYGON_MODE_LINE;

	case GFX_POLYGON_MODE_POINT:
		return VK_POLYGON_MODE_POINT;

	default:
		return VK_POLYGON_MODE_FILL;
	}
}

VkCullModeFlags CVKHelper::TranslateCullModeFlags(bool bEnableCullFace, GfxCullFace cullFace)
{
	if (bEnableCullFace) {
		switch ((int)cullFace) {
		case GFX_CULLFACE_FRONT:
			return VK_CULL_MODE_FRONT_BIT;

		case GFX_CULLFACE_BACK:
			return VK_CULL_MODE_BACK_BIT;

		case GFX_CULLFACE_FRONT_AND_BACK:
			return VK_CULL_MODE_FRONT_AND_BACK;

		default:
			return VK_CULL_MODE_BACK_BIT;
		}
	}
	else {
		return VK_CULL_MODE_NONE;
	}
}

VkFrontFace CVKHelper::TranslateFrontFace(GfxFrontFace frontFace)
{
	switch ((int)frontFace) {
	case GFX_FRONTFACE_CW:
		return VK_FRONT_FACE_CLOCKWISE;

	case GFX_FRONTFACE_CCW:
		return VK_FRONT_FACE_COUNTER_CLOCKWISE;

	default:
		return VK_FRONT_FACE_COUNTER_CLOCKWISE;
	}
}

VkCompareOp CVKHelper::TranslateCompareOp(GfxCompareOp op)
{
	switch ((int)op) {
	case GFX_COMPAREOP_NEVER:
		return VK_COMPARE_OP_NEVER;

	case GFX_COMPAREOP_LESS:
		return VK_COMPARE_OP_LESS;

	case GFX_COMPAREOP_LEQUAL:
		return VK_COMPARE_OP_LESS_OR_EQUAL;

	case GFX_COMPAREOP_GREATER:
		return VK_COMPARE_OP_GREATER;

	case GFX_COMPAREOP_GEQUAL:
		return VK_COMPARE_OP_GREATER_OR_EQUAL;

	case GFX_COMPAREOP_EQUAL:
		return VK_COMPARE_OP_EQUAL;

	case GFX_COMPAREOP_NOTEQUAL:
		return VK_COMPARE_OP_NOT_EQUAL;

	case GFX_COMPAREOP_ALWAYS:
		return VK_COMPARE_OP_ALWAYS;

	default:
		return VK_COMPARE_OP_MAX_ENUM;
	}
}

VkStencilOp CVKHelper::TranslateStencilOp(GfxStencilOp op)
{
	switch ((int)op) {
	case GFX_STENCILOP_KEEP:
		return VK_STENCIL_OP_KEEP;

	case GFX_STENCILOP_ZERO:
		return VK_STENCIL_OP_ZERO;

	case GFX_STENCILOP_REPLACE:
		return VK_STENCIL_OP_REPLACE;

	case GFX_STENCILOP_INCR:
		return VK_STENCIL_OP_INCREMENT_AND_CLAMP;

	case GFX_STENCILOP_INCR_WRAP:
		return VK_STENCIL_OP_INCREMENT_AND_WRAP;

	case GFX_STENCILOP_DECR:
		return VK_STENCIL_OP_DECREMENT_AND_CLAMP;

	case GFX_STENCILOP_DECR_WRAP:
		return VK_STENCIL_OP_DECREMENT_AND_WRAP;

	case GFX_STENCILOP_INVERT:
		return VK_STENCIL_OP_INVERT;

	default:
		return VK_STENCIL_OP_MAX_ENUM;
	}
}

VkBlendOp CVKHelper::TranslateBlendOp(GfxBlendOp op)
{
	switch ((int)op) {
	case GFX_BLENDOP_ADD:
		return VK_BLEND_OP_ADD;

	case GFX_BLENDOP_SUBTRACT:
		return VK_BLEND_OP_SUBTRACT;

	case GFX_BLENDOP_REVERSE_SUBTRACT:
		return VK_BLEND_OP_REVERSE_SUBTRACT;

	case GFX_BLENDOP_MIN:
		return VK_BLEND_OP_MIN;

	case GFX_BLENDOP_MAX:
		return VK_BLEND_OP_MAX;

	default:
		return VK_BLEND_OP_MAX_ENUM;
	}
}

VkBlendFactor CVKHelper::TranslateBlendFactor(GfxBlendFactor blendFactor)
{
	switch ((int)blendFactor) {
	case GFX_BLENDFACTOR_ZERO:
		return VK_BLEND_FACTOR_ZERO;

	case GFX_BLENDFACTOR_ONE:
		return VK_BLEND_FACTOR_ONE;

	case GFX_BLENDFACTOR_SRC_COLOR:
		return VK_BLEND_FACTOR_SRC_COLOR;

	case GFX_BLENDFACTOR_ONE_MINUS_SRC_COLOR:
		return VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR;

	case GFX_BLENDFACTOR_DST_COLOR:
		return VK_BLEND_FACTOR_DST_COLOR;

	case GFX_BLENDFACTOR_ONE_MINUS_DST_COLOR:
		return VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR;

	case GFX_BLENDFACTOR_SRC_ALPHA:
		return VK_BLEND_FACTOR_SRC_ALPHA;

	case GFX_BLENDFACTOR_ONE_MINUS_SRC_ALPHA:
		return VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;

	case GFX_BLENDFACTOR_DST_ALPHA:
		return VK_BLEND_FACTOR_DST_ALPHA;

	case GFX_BLENDFACTOR_ONE_MINUS_DST_ALPHA:
		return VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA;

	case GFX_BLENDFACTOR_CONSTANT_COLOR:
		return VK_BLEND_FACTOR_CONSTANT_COLOR;

	case GFX_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR:
		return VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR;

	case GFX_BLENDFACTOR_CONSTANT_ALPHA:
		return VK_BLEND_FACTOR_CONSTANT_ALPHA;

	case GFX_BLENDFACTOR_ONE_MINUS_CONSTANT_ALPHA:
		return VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA;

	case GFX_BLENDFACTOR_SRC_ALPHA_SATURATE:
		return VK_BLEND_FACTOR_SRC_ALPHA_SATURATE;

	default:
		return VK_BLEND_FACTOR_MAX_ENUM;
	}
}

VkImageViewType CVKHelper::TranslateImageViewType(GfxTextureType type)
{
	switch ((int)type) {
	case GFX_TEXTURE_2D:
		return VK_IMAGE_VIEW_TYPE_2D;

	case GFX_TEXTURE_2D_MULTISAMPLE:
		return VK_IMAGE_VIEW_TYPE_2D;

	case GFX_TEXTURE_2D_ARRAY:
		return VK_IMAGE_VIEW_TYPE_2D_ARRAY;

	case GFX_TEXTURE_CUBE_MAP:
		return VK_IMAGE_VIEW_TYPE_CUBE;

	default:
		return VK_IMAGE_VIEW_TYPE_MAX_ENUM;
	}
}

VkIndexType CVKHelper::TranslateIndexType(GfxIndexType type)
{
	switch ((int)type) {
	case GFX_INDEX_UNSIGNED_SHORT:
		return VK_INDEX_TYPE_UINT16;

	case GFX_INDEX_UNSIGNED_INT:
		return VK_INDEX_TYPE_UINT32;

	default:
		return VK_INDEX_TYPE_MAX_ENUM;
	}
}

VkFilter CVKHelper::TranslateFilter(GfxFilter filter)
{
	switch ((int)filter) {
	case GFX_FILTER_NEAREST:
		return VK_FILTER_NEAREST;

	case GFX_FILTER_LINEAR:
		return VK_FILTER_LINEAR;

	default:
		return VK_FILTER_MAX_ENUM;
	}
}

VkSamplerMipmapMode CVKHelper::TranslateSamplerMipmapMode(GfxSamplerMipmapMode mipmapMode)
{
	switch ((int)mipmapMode) {
	case GFX_SAMPLER_MIPMAP_MODE_NEAREST:
		return VK_SAMPLER_MIPMAP_MODE_NEAREST;

	case GFX_SAMPLER_MIPMAP_MODE_LINEAR:
		return VK_SAMPLER_MIPMAP_MODE_LINEAR;

	default:
		return VK_SAMPLER_MIPMAP_MODE_MAX_ENUM;
	}
}

VkSamplerAddressMode CVKHelper::TranslateSamplerAddressMode(GfxSamplerAddressMode addressMode)
{
	switch ((int)addressMode) {
	case GFX_SAMPLER_ADDRESS_MODE_REPEAT:
		return VK_SAMPLER_ADDRESS_MODE_REPEAT;

	case GFX_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:
		return VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT;

	case GFX_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE:
		return VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;

	case GFX_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER:
		return VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER;

	case GFX_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE:
		return VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;

	default:
		return VK_SAMPLER_ADDRESS_MODE_MAX_ENUM;
	}
}

VkImageLayout CVKHelper::TranslateImageLayout(GfxImageLayout imageLayout)
{
	switch ((int)imageLayout) {
	case GFX_IMAGE_LAYOUT_GENERAL:
		return VK_IMAGE_LAYOUT_GENERAL;

	case GFX_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
		return VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;

	case GFX_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
		return VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;

	case GFX_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
		return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;

	case GFX_IMAGE_LAYOUT_COLOR_READ_ONLY_OPTIMAL:
		return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;

	case GFX_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
		return VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;

	case GFX_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
		return VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL;

	case GFX_IMAGE_LAYOUT_PRESENT_SRC_OPTIMAL:
		return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;

	default:
		return VK_IMAGE_LAYOUT_MAX_ENUM;
	}
}
