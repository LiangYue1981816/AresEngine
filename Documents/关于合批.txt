关于合批的思考

有以下几种合批方式
1. 自动合批
自动合批是指引擎会自动组织使用相同MeshDraw的Instance数据，并调用DrawInstance进行渲染。
在运行时由于每贞可见的相同MeshDraw数量不同，引擎会重新组织并更新Instance数据，需要注意的是更新数据会带来性能损耗且更新的数据越多越频繁损耗越大
优点：由于合并的只是Instance数据，故此合并效率较高，渲染时使用实例渲染。可以应对动态物体
缺点：无法处理带有光照贴图这种模型合批（uv坐标不同而不只是Instance数据不同），且当有大量动态物体需要合批时，更新数据的性能消耗也要引起重视

2. 手动合批
手动合批是指在场景制作阶段在编辑器中指定好那些相同的MeshDraw需要合并在一起，这里的合并的只是Instance数据，运行时调用DrawInstance进行渲染。
在运行时手动合批的MeshDraw所有实例整体进行可见性剔除，只有在其父节点发生变化时才会重新组织Instane数据并进行更新。可见对于静态物体而言是不会有数据更新
优点：对于静态物体，不会有自动合批的Instance数据更新，故此效率更高
缺点：与自动合批一样，不支持带有光照贴图的模型合批
备注：手动合批并不是只能应对静态模型，只是对于动态模型其效率略低手动合批（此时必然更新数据，但是由于整体剔除其更新数据量是所有实例，而自动合批则是可见实例）

3. 动态模型合批
动态模型合批是指在运行时将使用相同顶点属性的模型合并成一个更大的模型。其必然带来数据更新，参与合并的模型越多，顶点属性越复杂其需要更新的数据量就越大。
优点：可以对不同的模型进行合批，同时可以应对带有光照贴图的模型
缺点：对于相同模型而言，合并后内存会更大，同时很可能由于每贞合并的模型数据量较大降低性能

5. 静态模型合批
静态模型合批是指在场景制作阶段在编辑器中制定那些模型需要合并在一起，这里的合并是合并模型的的顶点数据，合并后相当于一个大模型，运行时无需更新。
优点：可以对不同的模型进行合批，同时可以应对带有光照贴图的模型。由于离线进行的合批故此运行时没有性能损耗
缺点：内存占用较大


总结
1. 自动合批适用于动态光影的少量动态物体
2. 手动合批使用于动态光影的大量场景静态物体
